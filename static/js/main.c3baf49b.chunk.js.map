{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","count","setCount","loading","setLoading","quote","setQuote","author","setAuthor","useEffect","a","fetch","response","json","data","content","console","log","fetchData","className","id","role","href","target","rel","type","onClick","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gPAGe,SAASA,IACtB,MAA0BC,mBAAS,GAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAA8BF,oBAAS,GAAvC,mBAAOG,EAAP,KAAgBC,EAAhB,KACA,EAA0BJ,mBAAS,MAAnC,mBAAOK,EAAP,KAAcC,EAAd,KACA,EAA4BN,mBAAS,MAArC,mBAAOO,EAAP,KAAeC,EAAf,KAmBA,OAjBAC,qBAAU,WAAM,4CACd,8BAAAC,EAAA,sEAEIN,GAAW,GAFf,SAG2BO,MAAM,kCAHjC,cAGUC,EAHV,gBAIuBA,EAASC,OAJhC,OAIUC,EAJV,OAKIR,EAASQ,EAAKC,SACdP,EAAUM,EAAKP,QACfH,GAAW,GAPf,kDASIY,QAAQC,IAAI,oBACZD,QAAQC,IAAR,MAVJ,2DADc,uBAAC,WAAD,wBAcdC,KACC,CAACjB,IAGF,qBAAKkB,UAAU,MAAf,SACE,sBAAKC,GAAG,YAAYD,UAAU,qBAA9B,UACE,qBAAKA,UAAU,cAAf,SACE,oBAAIA,UAAU,yBAAd,oCAGF,qBAAKA,UAAU,YAAf,SACGhB,EACC,qBAAKgB,UAAU,gCAAf,SACE,qBAAKA,UAAU,kCAAkCE,KAAK,SAAtD,SACE,sBAAMF,UAAU,kBAAhB,4BAIJ,6BAAYA,UAAU,kBAAtB,UACE,mBAAGC,GAAG,OAAOD,UAAU,YAAvB,SACGd,IAEH,wBACEe,GAAG,SACHD,UAAU,uCAFZ,SAIGZ,SAMT,sBAAKY,UAAU,cAAf,UACE,oBACEC,GAAG,cACHD,UAAU,4BACVG,KACE,0CACAjB,EACA,OACAE,EAEFgB,OAAO,SACPC,IAAI,aAVN,UAYE,mBAAGL,UAAU,kBAZf,YAcA,wBACEC,GAAG,YACHD,UAAU,qCACVM,KAAK,SACLC,QAAS,kBAAMxB,EAASD,EAAQ,IAJlC,+BCtEV,IAYe0B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCFdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAACvC,EAAD,MAEFwC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.c3baf49b.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport \"./index.css\";\n\nexport default function App() {\n  const [count, setCount] = useState(0);\n  const [loading, setLoading] = useState(false);\n  const [quote, setQuote] = useState(null);\n  const [author, setAuthor] = useState(null);\n\n  useEffect(() => {\n    async function fetchData() {\n      try {\n        setLoading(true);\n        const response = await fetch(\"https://api.quotable.io/random\");\n        const data = await response.json();\n        setQuote(data.content);\n        setAuthor(data.author);\n        setLoading(false);\n      } catch (error) {\n        console.log(\"API FETCH ERROR!\");\n        console.log(error);\n      }\n    }\n    fetchData();\n  }, [count]);\n\n  return (\n    <div className=\"App\">\n      <div id=\"quote-box\" className=\"card shadow-lg m-1\">\n        <div className=\"card-header\">\n          <h1 className=\"card-title text-center\">Random Quote Machine</h1>\n        </div>\n\n        <div className=\"card-body\">\n          {loading ? (\n            <div className=\"d-flex justify-content-center\">\n              <div className=\"spinner-border text-primary m-2\" role=\"status\">\n                <span className=\"visually-hidden\">Loading...</span>\n              </div>\n            </div>\n          ) : (\n            <blockquote className=\"blockquote mb-0\">\n              <p id=\"text\" className=\"card-text\">\n                {quote}\n              </p>\n              <footer\n                id=\"author\"\n                className=\"blockquote-footer card-text text-end\"\n              >\n                {author}\n              </footer>\n            </blockquote>\n          )}\n        </div>\n\n        <div className=\"card-footer\">\n          <a\n            id=\"tweet-quote\"\n            className=\"card-link btn btn-primary\"\n            href={\n              'https://twitter.com/intent/tweet?text=\"' +\n              quote +\n              '\" - ' +\n              author\n            }\n            target=\"_blank\"\n            rel=\"noreferrer\"\n          >\n            <i className=\"bi bi-twitter\"></i> Tweet\n          </a>\n          <button\n            id=\"new-quote\"\n            className=\"btn btn-primary text-end float-end\"\n            type=\"button\"\n            onClick={() => setCount(count + 1)}\n          >\n            New Quote\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}